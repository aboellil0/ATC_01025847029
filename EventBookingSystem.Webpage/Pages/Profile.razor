@page "/profile"
@inject NavigationManager NavigationManager

<div class="profile-container">
    <div class="profile-header">
        <div class="profile-info">
            <div class="profile-avatar">
                <img src="@currentUser.Avatar" alt="@currentUser.Name" />
                <button class="edit-avatar-btn" @onclick="ChangeAvatar">
                    📷
                </button>
            </div>
            <div class="profile-details">
                <h1>@currentUser.Name</h1>
                <p>@currentUser.Email</p>
                <p>Member since @currentUser.JoinDate.ToString("MMMM yyyy")</p>
            </div>
        </div>
    </div>

    <div class="profile-content">
        <div class="profile-tabs">
            <button class="tab-btn @(activeTab == "info" ? "active" : "")"
                    @onclick='() => activeTab = "info"'>
                Personal Information
            </button>
            <button class="tab-btn @(activeTab == "bookings" ? "active" : "")"
                    @onclick='() => activeTab = "bookings"'>
                My Bookings
            </button>
        </div>

        @if (activeTab == "info")
        {
            <div class="profile-section">
                <div class="section-header">
                    <h2>Personal Information</h2>
                    <button class="edit-btn" @onclick="() => isEditing = true">
                        Edit Profile
                    </button>
                </div>

                @if (isEditing)
                {
                    <EditForm Model="@editUser" OnValidSubmit="HandleProfileUpdate">
                        <DataAnnotationsValidator />

                        <div class="form-group">
                            <label>Full Name</label>
                            <InputText @bind-Value="editUser.Name" class="form-control" />
                            <ValidationMessage For="@(() => editUser.Name)" />
                        </div>

                        <div class="form-group">
                            <label>Email</label>
                            <InputText @bind-Value="editUser.Email" class="form-control" />
                            <ValidationMessage For="@(() => editUser.Email)" />
                        </div>

                        <div class="form-group">
                            <label>Phone Number</label>
                            <InputText @bind-Value="editUser.Phone" class="form-control" />
                            <ValidationMessage For="@(() => editUser.Phone)" />
                        </div>

                        <div class="form-actions">
                            <button type="button" class="btn btn-secondary" @onclick="CancelEdit">
                                Cancel
                            </button>
                            <button type="submit" class="btn btn-primary">
                                Save Changes
                            </button>
                        </div>
                    </EditForm>
                }
                else
                {
                    <div class="info-grid">
                        <div class="info-item">
                            <span class="info-label">Full Name</span>
                            <span class="info-value">@currentUser.Name</span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">Email</span>
                            <span class="info-value">@currentUser.Email</span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">Phone</span>
                            <span class="info-value">@currentUser.Phone</span>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="profile-section">
                <h2>My Bookings</h2>

                @if (userBookings.Any())
                {
                    <div class="bookings-grid">
                        @foreach (var booking in userBookings)
                        {
                            <div class="booking-card">
                                <div class="booking-image">
                                    <img src="@booking.EventImage" alt="@booking.EventTitle" />
                                </div>
                                <div class="booking-info">
                                    <h3>@booking.EventTitle</h3>
                                    <p class="booking-date">@booking.EventDate.ToString("dddd, MMMM d, yyyy")</p>
                                    <p class="booking-details">
                                        <span class="ticket-count">@booking.TicketCount tickets</span>
                                        <span class="booking-price">@booking.TotalAmount</span>
                                    </p>
                                    <div class="booking-status">
                                        <span class="status-badge @booking.Status.ToLower()">
                                            @booking.Status
                                        </span>
                                    </div>
                                </div>
                                <div class="booking-actions">
                                    <button class="btn btn-view" @onclick="() => ViewBooking(booking)">
                                        View Details
                                    </button>
                                    @if (booking.Status != "Cancelled" && booking.Status != "Completed")
                                    {
                                        <button class="btn btn-cancel" @onclick="() => CancelBooking(booking)">
                                            Cancel Booking
                                        </button>
                                    }
                                </div>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <div class="no-bookings">
                        <p>You haven't made any bookings yet.</p>
                        <button class="btn btn-primary" @onclick="ExploreEvents">
                            Explore Events
                        </button>
                    </div>
                }
            </div>
        }
    </div>
</div>

@code {
    private string activeTab = "info";
    private bool isEditing = false;
    private UserModel currentUser = new();
    private UserModel editUser = new();
    private List<BookingModel> userBookings = new();

    protected override void OnInitialized()
    {
        // Simulated user data
        currentUser = new UserModel
            {
                Name = "John Doe",
                Email = "john.doe@example.com",
                Phone = "+1 234 567 8900",
                Avatar = "https://images.pexels.com/photos/2379004/pexels-photo-2379004.jpeg",
                JoinDate = DateTime.Now.AddYears(-2)
            };

        editUser = new UserModel
            {
                Name = currentUser.Name,
                Email = currentUser.Email,
                Phone = currentUser.Phone
            };

        // Simulated bookings data
        userBookings = new List<BookingModel>
        {
            new() {
                Id = "BK001",
                EventTitle = "Summer Music Festival",
                EventDate = DateTime.Parse("2024-06-28"),
                EventImage = "https://images.pexels.com/photos/1763075/pexels-photo-1763075.jpeg",
                TicketCount = 2,
                TotalAmount = "$198",
                Status = "Confirmed"
            },
            new() {
                Id = "BK002",
                EventTitle = "Tech Conference 2024",
                EventDate = DateTime.Parse("2024-08-05"),
                EventImage = "https://images.pexels.com/photos/2774556/pexels-photo-2774556.jpeg",
                TicketCount = 1,
                TotalAmount = "$149",
                Status = "Completed"
            }
        };
    }

    private void HandleProfileUpdate()
    {
        currentUser = new UserModel
            {
                Name = editUser.Name,
                Email = editUser.Email,
                Phone = editUser.Phone,
                Avatar = currentUser.Avatar,
                JoinDate = currentUser.JoinDate
            };
        isEditing = false;
    }

    private void CancelEdit()
    {
        editUser = new UserModel
            {
                Name = currentUser.Name,
                Email = currentUser.Email,
                Phone = currentUser.Phone
            };
        isEditing = false;
    }

    private void ChangeAvatar()
    {
        // Implement avatar change functionality
    }

    private void ViewBooking(BookingModel booking)
    {
        NavigationManager.NavigateTo($"/bookings/{booking.Id}");
    }

    private void CancelBooking(BookingModel booking)
    {
        booking.Status = "Cancelled";
    }

    private void ExploreEvents()
    {
        NavigationManager.NavigateTo("/events");
    }

    private class UserModel
    {
        public string Name { get; set; }
        public string Email { get; set; }
        public string Phone { get; set; }
        public string Avatar { get; set; }
        public DateTime JoinDate { get; set; }
    }

    private class BookingModel
    {
        public string Id { get; set; }
        public string EventTitle { get; set; }
        public DateTime EventDate { get; set; }
        public string EventImage { get; set; }
        public int TicketCount { get; set; }
        public string TotalAmount { get; set; }
        public string Status { get; set; }
    }
}