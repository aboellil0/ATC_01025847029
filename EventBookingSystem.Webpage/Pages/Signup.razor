@page "/signup"
@using System.ComponentModel.DataAnnotations
@using EventBookingSystem.Core.DTOs.Auth
@using EventBookingSystem.Webpage.Services
@inject IClientAuthService AuthService
@inject NavigationManager NavigationManager
@inject HttpClient Http

<div class="auth-container m-auto">
    <div class="auth-card">
        <div class="auth-header">
            <h2>Sign up for EventCandy</h2>
            <p>Create your account to get started</p>
        </div>

        <EditForm Model="@registerModel" OnValidSubmit="HandleSignup">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="username">Username</label>
                <InputText id="username" class="form-control" @bind-Value="registerModel.UserName" />
                <ValidationMessage For="@(() => registerModel.UserName)" />
            </div>

            <div class="form-row">
                <div class="form-group">
                    <label for="firstName">First Name</label>
                    <InputText id="firstName" class="form-control" @bind-Value="registerModel.FirstName" />
                    <ValidationMessage For="@(() => registerModel.FirstName)" />
                </div>

                <div class="form-group">
                    <label for="lastName">Last Name</label>
                    <InputText id="lastName" class="form-control" @bind-Value="registerModel.LastName" />
                    <ValidationMessage For="@(() => registerModel.LastName)" />
                </div>
            </div>

            <div class="form-group">
                <label for="email">Email</label>
                <InputText id="email" type="email" class="form-control" @bind-Value="registerModel.Email" />
                <ValidationMessage For="@(() => registerModel.Email)" />
            </div>

            <div class="form-group">
                <label for="birthday">Birthday</label>
                <InputDate id="birthday" class="form-control" @bind-Value="registerModel.Birthdate" />
                <ValidationMessage For="@(() => registerModel.Birthdate)" />
            </div>

            <div class="form-group">
                <label for="password">Password</label>
                <InputText id="password" type="password" class="form-control" @bind-Value="registerModel.Password" />
                <ValidationMessage For="@(() => registerModel.Password)" />
            </div>

            <div class="form-group">
                <label for="confirmPassword">Confirm Password</label>
                <InputText id="confirmPassword" type="password" class="form-control" @bind-Value="registerModel.ConfirmPassword" />
                <ValidationMessage For="@(() => registerModel.ConfirmPassword)" />
            </div>

            <div class="form-options d-flex flex-column">
                <div>
                    <label class="checkbox-container">
                        <input type="checkbox" @bind="acceptedTerms" />
                        <span class="checkmark">I agree to the </span>
                    </label>
                </div>
                <div>
                    <a href="/terms">Terms of Service</a> and <a href="/privacy">Privacy Policy</a>
                </div>
            </div>

            <button type="submit" class="auth-button login-button" disabled="@(isLoading||!acceptedTerms)">
                Create Account
            </button>
        </EditForm>

        <button class="auth-button google-button">
            <img src="images/google-icon.svg" alt="Google" />
            <span>Sign up with Google</span>
        </button>

        <div class="auth-footer">
            <p>Already have an account? <a href="/login" @onclick:preventDefault="true" @onclick="NavigateToLogin">Log in</a></p>
        </div>
    </div>
</div>

@code {
    private RegisterViewModel registerModel = new();
    private bool acceptedTerms;
    private string errorMessage = string.Empty;
    private bool isLoading = false;

    public class RegisterViewModel
    {
        [Required(ErrorMessage = "First name is required")]
        [StringLength(50, ErrorMessage = "First name cannot exceed 50 characters")]
        public string FirstName { get; set; }

        [Required(ErrorMessage = "Last name is required")]
        [StringLength(50, ErrorMessage = "Last name cannot exceed 50 characters")]
        public string LastName { get; set; }

        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email format")]
        public string Email { get; set; }

        [Required(ErrorMessage = "Username is required")]
        [StringLength(50, ErrorMessage = "Username cannot exceed 50 characters")]
        public string UserName { get; set; }

        [Required(ErrorMessage = "Birthdate is required")]
        public DateOnly Birthdate { get; set; } = new DateOnly(2000, 1, 1);

        [Required(ErrorMessage = "Password is required")]
        public string Password { get; set; }

        [Required(ErrorMessage = "Confirm Password is required")]
        [Compare(nameof(Password), ErrorMessage = "Passwords do not match")]
        public string ConfirmPassword { get; set; }
    }

    private async Task HandleSignup()
    {
        errorMessage = string.Empty;
        isLoading = true;

        if (registerModel.Password != registerModel.ConfirmPassword)
        {
            errorMessage = "Passwords do not match";
            isLoading = false;
            return;
        }

        try
        {
            var registerRequest = new RegisterReq
                {
                    UserName = registerModel.UserName,
                    Email = registerModel.Email,
                    FirstName = registerModel.FirstName,
                    LastName = registerModel.LastName,
                    Birthaday = registerModel.Birthdate,
                    Password = registerModel.Password
                };

            var result = await AuthService.RegisterAsync(registerRequest);

            if (result.Success)
            {
                NavigationManager.NavigateTo("/");
            }
            else
            {
                errorMessage = result.Error ?? "Registration failed. Please try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private void NavigateToLogin()
    {
        NavigationManager.NavigateTo("/login");
    }
}