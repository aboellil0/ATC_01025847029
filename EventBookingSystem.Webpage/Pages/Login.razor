@page "/login"
@using System.ComponentModel.DataAnnotations
@using Blazored.LocalStorage
@using EventBookingSystem.Core.DTOs.Auth
@using EventBookingSystem.Webpage.Services
@inject IClientAuthService AuthService
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject ILocalStorageService LocalStorage

<div class="auth-container m-auto">
    <div class="auth-card">
        <div class="auth-header">
            <h2>Log In to EventCandy</h2>
            <p>Welcome back! Please enter your details.</p>
        </div>

        <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="email">Email</label>
                <InputText id="email" type="email" class="form-control" @bind-Value="loginModel.Email" />
                <ValidationMessage For="@(() => loginModel.Email)" />
            </div>

            <div class="form-group">
                <label for="password">Password</label>
                <InputText id="password" type="password" class="form-control" @bind-Value="loginModel.Password" />
                <ValidationMessage For="@(() => loginModel.Password)" />
            </div>

            <div class="form-options">
                <label class="checkbox-container">
                    <input type="checkbox" @bind="loginModel.RememberMe" />
                    <span class="checkmark"></span>
                    Remember me
                </label>
                <a href="/forgot-password" class="forgot-link">Forgot password?</a>
            </div>

            <button type="submit" class="auth-button login-button">
                Log In
            </button>
        </EditForm>

        <button class="auth-button google-button">
            <img src="images/google-icon.svg" alt="Google" />
            <span>Sign in with Google</span>
        </button>

        <div class="auth-footer">
            <p>Don't have an account? <a href="/signup" @onclick:preventDefault="true" @onclick="NavigateToSignup">Sign up</a></p>
        </div>
    </div>
</div>

@code {
    private LoginViewModel loginModel = new();
    private string errorMessage = string.Empty;
    private bool isLoading = false;

    public class LoginViewModel
    {
        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email format")]
        public string Email { get; set; }

        [Required(ErrorMessage = "Password is required")]
        [StringLength(100, ErrorMessage = "Password must be at least {2} characters long", MinimumLength = 6)]
        public string Password { get; set; }

        public bool RememberMe { get; set; }
    }

    private async Task HandleLogin()
    {
        errorMessage = string.Empty;
        isLoading = true;

        try
        {
            var loginRequest = new LoginReq
                {
                    Email = loginModel.Email,
                    Password = loginModel.Password,
                    UserName = loginModel.Email
                };

            var result = await AuthService.LoginAsync(loginRequest);

            if (result.Success)
            {
                if (loginModel.RememberMe)
                {
                    await LocalStorage.SetItemAsync("rememberMe", true);
                }

                var returnUrl = await LocalStorage.GetItemAsync<string>("returnUrl");

                if (!string.IsNullOrEmpty(returnUrl))
                {
                    await LocalStorage.RemoveItemAsync("returnUrl");
                    NavigationManager.NavigateTo(returnUrl);
                }
                else
                {
                    NavigationManager.NavigateTo("/");
                }
            }
            else
            {
                errorMessage = result.Error ?? "Login failed. Please check your credentials and try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private void NavigateToSignup()
    {
        NavigationManager.NavigateTo("/signup");
    }
}