@page "/admin/events"
@* @attribute [Authorize(Roles = "Admin")] *@

<div class="admin-content-section">
    <div class="section-header">
        <h2>Event Management</h2>
        <button class="btn btn-primary" @onclick="OpenCreateEventModal">
            Create New Event
        </button>
    </div>

    <div class="search-filter-section">
        <div class="search-box">
            <input type="text"
                   placeholder="Search events..."
                   @bind-value="searchQuery"
                   @bind-value:event="oninput" />
            <button class="search-btn">🔍</button>
        </div>
        <div class="filter-box">
            <select @bind="selectedCategory">
                <option value="">All Categories</option>
                @foreach (var category in Categories)
                {
                    <option value="@category.Id">@category.Name</option>
                }
            </select>
            <select @bind="selectedStatus">
                <option value="">All Status</option>
                <option value="Active">Active</option>
                <option value="Draft">Draft</option>
                <option value="Completed">Completed</option>
                <option value="Cancelled">Cancelled</option>
            </select>
        </div>
    </div>

    <div class="events-table">
        <table>
            <thead>
                <tr>
                    <th>Event</th>
                    <th>Category</th>
                    <th>Date</th>
                    <th>Price</th>
                    <th>Status</th>
                    <th>Tickets Sold</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var evt in FilteredEvents)
                {
                    <tr>
                        <td class="event-cell">
                            <img src="@evt.ImageUrl" alt="@evt.Title" />
                            <div class="event-info">
                                <span class="event-title">@evt.Title</span>
                                <span class="event-location">@evt.Location</span>
                            </div>
                        </td>
                        <td>
                            <span class="category-badge">
                                @Categories.First(c => c.Id == evt.CategoryId).Name
                            </span>
                        </td>
                        <td>@evt.Date.ToString("MMM dd, yyyy")</td>
                        <td>@evt.Price</td>
                        <td>
                            <span class="status-badge @evt.Status.ToLower()">@evt.Status</span>
                        </td>
                        <td>
                            <div class="tickets-info">
                                <div class="progress-bar">
                                    <div class="progress" style="width: @(evt.TicketsSold * 100 / evt.TotalTickets)%"></div>
                                </div>
                                <span>@evt.TicketsSold / @evt.TotalTickets</span>
                            </div>
                        </td>
                        <td>
                            <div class="action-buttons">
                                <button class="action-btn view" @onclick="() => ViewEvent(evt)">
                                    👁️
                                </button>
                                <button class="action-btn edit" @onclick="() => EditEvent(evt)">
                                    ✏️
                                </button>
                                <button class="action-btn delete" @onclick="() => DeleteEvent(evt)">
                                    🗑️
                                </button>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    @if (showCreateModal)
    {
        <div class="modal-overlay">
            <div class="modal-content">
                <h3>Create New Event</h3>
                <EditForm Model="@newEvent" OnValidSubmit="HandleCreateEvent">
                    <DataAnnotationsValidator />

                    <div class="form-group">
                        <label>Title</label>
                        <InputText @bind-Value="newEvent.Title" class="form-control" />
                        <ValidationMessage For="@(() => newEvent.Title)" />
                    </div>

                    <div class="form-group">
                        <label>Location</label>
                        <InputText @bind-Value="newEvent.Location" class="form-control" />
                        <ValidationMessage For="@(() => newEvent.Location)" />
                    </div>

                    <div class="form-row">
                        <div class="form-group">
                            <label>Category</label>
                            <InputSelect @bind-Value="newEvent.CategoryId" class="form-control">
                                @foreach (var category in Categories)
                                {
                                    <option value="@category.Id">@category.Name</option>
                                }
                            </InputSelect>
                        </div>

                        <div class="form-group">
                            <label>Price</label>
                            <InputText @bind-Value="newEvent.Price" class="form-control" />
                            <ValidationMessage For="@(() => newEvent.Price)" />
                        </div>
                    </div>

                    <div class="form-row">
                        <div class="form-group">
                            <label>Date</label>
                            <InputDate @bind-Value="newEvent.Date" class="form-control" />
                            <ValidationMessage For="@(() => newEvent.Date)" />
                        </div>

                        <div class="form-group">
                            <label>Total Tickets</label>
                            <InputNumber @bind-Value="newEvent.TotalTickets" class="form-control" />
                            <ValidationMessage For="@(() => newEvent.TotalTickets)" />
                        </div>
                    </div>

                    <div class="modal-actions">
                        <button type="button" class="btn btn-secondary" @onclick="CloseModal">
                            Cancel
                        </button>
                        <button type="submit" class="btn btn-primary">
                            Create Event
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    }
</div>

@code {
    private string searchQuery = string.Empty;
    private string selectedCategory = string.Empty;
    private string selectedStatus = string.Empty;
    private bool showCreateModal = false;
    private EventModel newEvent = new();

    private List<CategoryModel> Categories = new()
    {
        new() { Id = 1, Name = "Music", Icon = "🎵" },
        new() { Id = 2, Name = "Sports", Icon = "⚽" },
        new() { Id = 3, Name = "Arts", Icon = "🎨" },
        new() { Id = 4, Name = "Food", Icon = "🍽️" },
        new() { Id = 5, Name = "Business", Icon = "💼" },
        new() { Id = 6, Name = "Technology", Icon = "💻" }
    };

    private List<EventModel> Events = new()
    {
        new() {
            Id = 1,
            Title = "Summer Music Festival",
            Location = "Central Park, NY",
            CategoryId = 1,
            Date = DateTime.Parse("2024-06-28"),
            Price = "$99",
            Status = "Active",
            TicketsSold = 850,
            TotalTickets = 1000,
            ImageUrl = "https://images.pexels.com/photos/1763075/pexels-photo-1763075.jpeg"
        },
        new() {
            Id = 2,
            Title = "Tech Conference 2024",
            Location = "Innovation Hub",
            CategoryId = 6,
            Date = DateTime.Parse("2024-08-05"),
            Price = "$149",
            Status = "Draft",
            TicketsSold = 0,
            TotalTickets = 500,
            ImageUrl = "https://images.pexels.com/photos/2774556/pexels-photo-2774556.jpeg"
        },
        new() {
            Id = 3,
            Title = "Food & Wine Expo",
            Location = "Convention Center",
            CategoryId = 4,
            Date = DateTime.Parse("2024-07-15"),
            Price = "$45",
            Status = "Active",
            TicketsSold = 320,
            TotalTickets = 800,
            ImageUrl = "https://images.pexels.com/photos/541216/pexels-photo-541216.jpeg"
        }
    };

    private IEnumerable<EventModel> FilteredEvents =>
        Events.Where(e =>
            (string.IsNullOrEmpty(searchQuery) ||
             e.Title.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
             e.Location.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)) &&
            (string.IsNullOrEmpty(selectedCategory) ||
             e.CategoryId.ToString() == selectedCategory) &&
            (string.IsNullOrEmpty(selectedStatus) ||
             e.Status == selectedStatus)
        );

    private void OpenCreateEventModal()
    {
        newEvent = new EventModel
            {
                Date = DateTime.Today,
                Status = "Draft",
                CategoryId = 1
            };
        showCreateModal = true;
    }

    private void CloseModal()
    {
        showCreateModal = false;
    }

    private void HandleCreateEvent()
    {
        // Add validation and API call here
        newEvent.Id = Events.Max(e => e.Id) + 1;
        newEvent.TicketsSold = 0;
        newEvent.ImageUrl = "https://images.pexels.com/photos/1763075/pexels-photo-1763075.jpeg";

        Events.Add(newEvent);
        showCreateModal = false;
    }

    private void ViewEvent(EventModel evt)
    {
        // Implement view functionality
    }

    private void EditEvent(EventModel evt)
    {
        // Implement edit functionality
    }

    private void DeleteEvent(EventModel evt)
    {
        // Implement delete functionality with confirmation
        Events.Remove(evt);
    }

    private class EventModel
    {
        public int Id { get; set; }
        public string Title { get; set; }
        public string Location { get; set; }
        public int CategoryId { get; set; }
        public DateTime Date { get; set; }
        public string Price { get; set; }
        public string Status { get; set; }
        public int TicketsSold { get; set; }
        public int TotalTickets { get; set; }
        public string ImageUrl { get; set; }
    }

    private class CategoryModel
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public string Icon { get; set; }
    }
}