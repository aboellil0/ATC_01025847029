@page "/events"
@using EventBookingSystem.Core.DTOs.Events
@using EventBookingSystem.Core.Entities
@using EventBookingSystem.Webpage.Services
@inject NavigationManager NavigationManager
@inject EventService EventService

<div class="events-page-container w-100">
    <div class="events-header">
        <h1>Discover Events</h1>
        <p>Find and book amazing events that match your interests</p>
    </div>

    <div class="search-section">
        <div class="search-bar">
            <input type="text"
            placeholder="Search events..."
            @bind-value="searchQuery"
            @bind-value:event="oninput"
            @onkeyup="HandleSearch" />
            <button class="search-button">
                🔍
            </button>
        </div>

        <div class="filters">
            <div class="filter-group">
                <label>Category</label>
                <select @bind="selectedCategory">
                    <option value="">All Categories</option>
                    @foreach (var category in Categories)
                    {
                        <option value="@category.Id">@category.Name</option>
                    }
                </select>
            </div>

            <div class="filter-group">
                <label>Date</label>
                <select @bind="selectedDate">
                    <option value="">Any Date</option>
                    <option value="today">Today</option>
                    <option value="tomorrow">Tomorrow</option>
                    <option value="weekend">This Weekend</option>
                    <option value="week">This Week</option>
                    <option value="month">This Month</option>
                </select>
            </div>

            <div class="filter-group">
                <label>Price Range</label>
                <select @bind="selectedPrice">
                    <option value="">Any Price</option>
                    <option value="free">Free</option>
                    <option value="paid">Paid</option>
                    <option value="0-50">$0 - $50</option>
                    <option value="50-100">$50 - $100</option>
                    <option value="100+">$100+</option>
                </select>
            </div>
        </div>
    </div>

    <div class="active-filters">
        @if (!string.IsNullOrEmpty(searchQuery))
        {
            <div class="filter-tag">
                Search: @searchQuery
                <button @onclick="() => ClearSearch()">×</button>
            </div>
        }
        @if (selectedCategory !=0)
        {
            <div class="filter-tag">
                Category: @Categories.First(c => c.Id == selectedCategory).Name
                <button @onclick="() => selectedCategory = 0">×</button>
            </div>
        }
        @if (!string.IsNullOrEmpty(selectedDate))
        {
            <div class="filter-tag">
                Date: @selectedDate
                <button @onclick="() => selectedDate = string.Empty">×</button>
            </div>
        }
        @if (!string.IsNullOrEmpty(selectedPrice))
        {
            <div class="filter-tag">
                Price: @selectedPrice
                <button @onclick="() => selectedPrice = string.Empty">×</button>
            </div>
        }
    </div>

    <div class="events-grid">
        @foreach (var evt in FilteredEvents)
        {
            <div class="event-card">
                <div class="event-card-image">
                    <img src="@evt.ImageUrl" alt="@evt.Name" />
                    <div class="event-card-date">
                        <span class="date-day">@evt.EventDate.Day</span>
                        <span class="date-month">@evt.EventDate.ToString("MMM")</span>
                    </div>
                    @if (evt.CreatedAt <= DateTime.UtcNow.AddDays(5))
                    {
                        <div class="featured-badge">Featured</div>
                    }
                </div>
                <div class="event-card-content">
                    <div class="event-category">@Categories.First(c => c.Id == (int)evt.Category).Name</div>
                    <h3 class="event-card-title">@evt.Name</h3>
                    <p class="event-card-location">@evt.Venue</p>
                    <div class="event-card-footer">
                        <span class="event-card-price">@evt.Price</span>
                        <button class="btn btn-book" @onclick="() => BookEvent(evt.Id)">Book Now</button>
                    </div>
                </div>
            </div>
        }
    </div>

    @if (!FilteredEvents.Any())
    {
        <div class="no-results">
            <h3>No events found</h3>
            <p>Try adjusting your filters or search criteria</p>
        </div>
    }
</div>

@code {
    private IList<EventDto> AllEvents;
    private string searchQuery = string.Empty;
    private int selectedCategory = 0;
    private string selectedDate = string.Empty;
    private string selectedPrice = string.Empty;

    private List<CategoryModel> Categories = new()
    {
        new() { Id = (int)EventCategory.Other, Name = "Other", Icon = "❓" },
        new() { Id = (int)EventCategory.Workshop, Name = "Workshop", Icon = "🛠️" },
        new() { Id = (int)EventCategory.Seminar, Name = "Seminar", Icon = "📚" },
        new() { Id = (int)EventCategory.Concert, Name = "Concert", Icon = "🎵" },
        new() { Id = (int)EventCategory.Exhibition, Name = "Exhibition", Icon = "🖼️" },
        new() { Id = (int)EventCategory.Sports, Name = "Sports", Icon = "⚽" },
        new() { Id = (int)EventCategory.Conference, Name = "Conference", Icon = "🏢" }
    };

    protected override async Task OnInitializedAsync()
    {
        AllEvents = await EventService.GetEvents();
    }

    private IEnumerable<EventDto> FilteredEvents => AllEvents
        .Where(e => string.IsNullOrEmpty(searchQuery) ||
                   e.Name.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                   e.Venue.Contains(searchQuery, StringComparison.OrdinalIgnoreCase))
        .Where(e => selectedCategory == 0 ||
                   e.Category == (EventCategory)selectedCategory)
        .Where(e => FilterByDate(e))
        .Where(e => FilterByPrice(e));

    private bool FilterByDate(EventDto evt)
    {
        if (string.IsNullOrEmpty(selectedDate)) return true;

        return selectedDate switch
        {
            "today" => evt.EventDate.Date == DateTime.Today,
            "tomorrow" => evt.EventDate.Date == DateTime.Today.AddDays(1),
            "weekend" => evt.EventDate.Date.DayOfWeek is DayOfWeek.Saturday or DayOfWeek.Sunday,
            "week" => evt.EventDate.Date <= DateTime.Today.AddDays(7),
            "month" => evt.EventDate.Date <= DateTime.Today.AddMonths(1),
            _ => true
        };
    }

    private bool FilterByPrice(EventDto evt)
    {
        if (string.IsNullOrEmpty(selectedPrice)) return true;

        var price = evt.Price;
        return selectedPrice switch
        {
            "free" => price == 0,
            "paid" => price > 0,
            "0-50" => price <= 50,
            "50-100" => price > 50 && price <= 100,
            "100+" => price > 100,
            _ => true
        };
    }

    private void HandleSearch()
    {
        // Implement real-time search
        StateHasChanged();
    }

    private void ClearSearch()
    {
        searchQuery = string.Empty;
        StateHasChanged();
    }

    private void BookEvent(Guid eventId)
    {
        NavigationManager.NavigateTo($"/events/{eventId}/book");
    }

    private class CategoryModel
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public string Icon { get; set; }
    }
}