@page "/admin/users"
@* @attribute [Authorize(Roles = "Admin")] *@

<div class="admin-content-section">
    <div class="section-header">
        <h2>User Management</h2>
        <button class="btn btn-primary" @onclick="OpenCreateUserModal">
            Add New User
        </button>
    </div>

    <div class="search-filter-section">
        <div class="search-box">
            <input type="text"
                   placeholder="Search users..."
                   @bind-value="searchQuery"
                   @bind-value:event="oninput" />
            <button class="search-btn">🔍</button>
        </div>
        <div class="filter-box">
            <select @bind="selectedRole">
                <option value="">All Roles</option>
                <option value="Admin">Admin</option>
                <option value="Manager">Manager</option>
                <option value="Staff">Staff</option>
            </select>
        </div>
    </div>

    <div class="users-table">
        <table>
            <thead>
                <tr>
                    <th>User</th>
                    <th>Email</th>
                    <th>Role</th>
                    <th>Status</th>
                    <th>Last Login</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var user in FilteredUsers)
                {
                    <tr>
                        <td class="user-cell">
                            <img src="@user.Avatar" alt="@user.Name" />
                            <div class="user-info">
                                <span class="user-name">@user.Name</span>
                                <span class="user-id">ID: @user.Id</span>
                            </div>
                        </td>
                        <td>@user.Email</td>
                        <td>
                            <span class="role-badge @user.Role.ToLower()">@user.Role</span>
                        </td>
                        <td>
                            <span class="status-badge @user.Status.ToLower()">@user.Status</span>
                        </td>
                        <td>@user.LastLogin.ToString("MMM dd, yyyy HH:mm")</td>
                        <td>
                            <div class="action-buttons">
                                <button class="action-btn edit" @onclick="() => EditUser(user)">
                                    ✏️
                                </button>
                                <button class="action-btn delete" @onclick="() => DeleteUser(user)">
                                    🗑️
                                </button>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    @if (showCreateModal)
    {
        <div class="modal-overlay">
            <div class="modal-content">
                <h3>Create New User</h3>
                <EditForm Model="@newUser" OnValidSubmit="HandleCreateUser">
                    <DataAnnotationsValidator />

                    <div class="form-group">
                        <label>Name</label>
                        <InputText @bind-Value="newUser.Name" class="form-control" />
                        <ValidationMessage For="@(() => newUser.Name)" />
                    </div>

                    <div class="form-group">
                        <label>Email</label>
                        <InputText @bind-Value="newUser.Email" class="form-control" />
                        <ValidationMessage For="@(() => newUser.Email)" />
                    </div>

                    <div class="form-group">
                        <label>Role</label>
                        <InputSelect @bind-Value="newUser.Role" class="form-control">
                            <option value="Admin">Admin</option>
                            <option value="Manager">Manager</option>
                            <option value="Staff">Staff</option>
                        </InputSelect>
                    </div>

                    <div class="modal-actions">
                        <button type="button" class="btn btn-secondary" @onclick="CloseModal">
                            Cancel
                        </button>
                        <button type="submit" class="btn btn-primary">
                            Create User
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    }
</div>

@code {
    private string searchQuery = string.Empty;
    private string selectedRole = string.Empty;
    private bool showCreateModal = false;
    private UserModel newUser = new();

    private List<UserModel> Users = new()
    {
        new() {
            Id = "USR001",
            Name = "John Smith",
            Email = "john.smith@example.com",
            Role = "Admin",
            Status = "Active",
            LastLogin = DateTime.Now.AddHours(-2),
            Avatar = "https://images.pexels.com/photos/2379004/pexels-photo-2379004.jpeg"
        },
        new() {
            Id = "USR002",
            Name = "Sarah Johnson",
            Email = "sarah.j@example.com",
            Role = "Manager",
            Status = "Active",
            LastLogin = DateTime.Now.AddDays(-1),
            Avatar = "https://images.pexels.com/photos/415829/pexels-photo-415829.jpeg"
        },
        new() {
            Id = "USR003",
            Name = "Mike Wilson",
            Email = "mike.w@example.com",
            Role = "Staff",
            Status = "Inactive",
            LastLogin = DateTime.Now.AddDays(-5),
            Avatar = "https://images.pexels.com/photos/1516680/pexels-photo-1516680.jpeg"
        }
    };

    private IEnumerable<UserModel> FilteredUsers =>
        Users.Where(u =>
            (string.IsNullOrEmpty(searchQuery) ||
             u.Name.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
             u.Email.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)) &&
            (string.IsNullOrEmpty(selectedRole) ||
             u.Role == selectedRole)
        );

    private void OpenCreateUserModal()
    {
        newUser = new UserModel();
        showCreateModal = true;
    }

    private void CloseModal()
    {
        showCreateModal = false;
    }

    private void HandleCreateUser()
    {
        // Add validation and API call here
        newUser.Id = $"USR{Users.Count + 1:000}";
        newUser.Status = "Active";
        newUser.LastLogin = DateTime.Now;
        newUser.Avatar = "https://images.pexels.com/photos/2379004/pexels-photo-2379004.jpeg";

        Users.Add(newUser);
        showCreateModal = false;
    }

    private void EditUser(UserModel user)
    {
        // Implement edit functionality
    }

    private void DeleteUser(UserModel user)
    {
        // Implement delete functionality with confirmation
        Users.Remove(user);
    }

    private class UserModel
    {
        public string Id { get; set; }
        public string Name { get; set; }
        public string Email { get; set; }
        public string Role { get; set; }
        public string Status { get; set; }
        public DateTime LastLogin { get; set; }
        public string Avatar { get; set; }
    }
}